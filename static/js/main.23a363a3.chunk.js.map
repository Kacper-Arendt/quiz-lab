{"version":3,"sources":["models/Enums.ts","components/firebase.ts","components/UI/Button.tsx","components/UI/Form.tsx","components/UI/Input.tsx","redux/hooks.ts","components/User/Helpers.tsx","redux/appSlice.ts","components/UI/Spinner.tsx","components/UI/Link.tsx","components/UI/ErrorMesage.tsx","components/User/Register.tsx","redux/user/userSlice.ts","components/User/UserLogin.tsx","images/avatarAvocado.svg","models/MediaQueries.ts","components/User/UserProfile.tsx","redux/game/gameSlice.ts","components/Game/ProgressBar.tsx","components/Game/Game.tsx","components/Question/useFetchQuestions.ts","components/Question/AddQuestion.tsx","components/UI/Wrapper.tsx","components/Question/Questions.tsx","components/HomePage/Home.tsx","images/question-mark-background.jpg","components/UI/Menu/Burger.tsx","components/UI/Menu/Navigation.tsx","components/UI/Menu/Menu.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["AppStatus","Firebase","auth","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","generateUserDocument","GoogleAuthProvider","user","id","a","userRef","doc","get","exists","email","name","set","console","error","getDocuments","path","collection","getUserDocument","userDocument","response","data","generateQuestionDocument","questionData","dbName","question","correctAnswer","answers","ButtonEl","styled","button","props","size","backgroundColor","Button","disabled","onClick","value","FormEl","form","Form","onSubmit","onSubmitHandler","onChange","children","InputEl","input","Input","autoComplete","type","onBlur","placeholder","register","useAppDispatch","useDispatch","useAppSelector","useSelector","RedirectIfUserIsAuth","state","isAuth","to","initialState","status","Idle","isMenuOpen","appSlice","createSlice","reducers","changeStatus","action","payload","setMessage","message","toggleMenu","actions","Span","div","Spinner","StyledLink","Link","LinkEl","P","p","Error","H1","h1","schema","yup","shape","required","password","min","max","confirmPassword","oneOf","Register","dispatch","history","useHistory","useForm","resolver","yupResolver","mode","handleSubmit","formState","errors","isDirty","isValid","useState","setUser","errorMessage","setErrorMessage","updateField","e","target","createUserWithEmailAndPasswordHandler","Loading","createUserWithEmailAndPassword","createUser","uid","push","UserSlice","login","logout","UserLogin","formData","setFormData","setError","fetchedUser","setFetchedUser","useEffect","signInWithEmailAndPasswordHandler","signInWithEmailAndPassword","userLogin","userId","device","mobileS","mobileM","tablet","laptop","laptopL","desktop","Profile","About","SingIn","UserProfile","logoutHandler","signOut","src","avatarAvocado","alt","GameSlice","startGame","reducer","prepare","questionRandomIds","questions","currentQuestion","score","updateCurrentQuestion","chosenAnswer","updateScore","setChosenAnswer","Bar","Progress","ProgressBar","progress","Div","isChosen","Result","Game","game","setCorrectAnswer","setQuestions","fetchedQuestion","Questions","dataArr","forEach","AnswersArr","answer","parseFloat","useFetchQuestions","submitAnswerHandler","preventDefault","setTimeout","selectedAnswerId","map","el","questionHandler","Answers","CorrectAnswers","nullable","AddQuestion","setQuestion","setAnswers","setQuestionHandler","currentTarget","addAnswersHandler","htmlFor","margin","Wrapper","QuestionsEl","Question","SpinnerEl","loading","setLoading","fetchQuestions","Element","Home","Burger","isOpen","BurgerEl","setIsOpen","Nav","nav","Navigation","Menu","GlobalStyles","createGlobalStyle","background","App","onAuthStateChange","onAuthStateChanged","component","exact","store","configureStore","appReducer","userReducer","gameReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23a363a3.chunk.js","sourcesContent":["export enum AppStatus {\n    Idle = 'IDLE',\n    Loading = 'LOADING',\n}\n\nexport enum Firebase {\n    Users = 'users',\n    Questions = 'questions',\n}","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport {Firebase as FirebaseEnum} from '../models/Enums'\nimport {IUser} from \"../models/User\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA5a5WuH6_DH2-7ZVYDh8twPp-LH4KwK5g\",\n    authDomain: \"quiz-lab-23749.firebaseapp.com\",\n    projectId: \"quiz-lab-23749\",\n    storageBucket: \"quiz-lab-23749.appspot.com\",\n    messagingSenderId: \"868035074179\",\n    appId: \"1:868035074179:web:dcc275bf573f5e801b63b6\"\n};\nexport default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport const signInWithGoogle = () => {\n    auth.signInWithRedirect(provider);\n};\n\nconst checkIfIdExists = (dbName: string): string => {\n    const ref = firestore.collection(dbName).doc();\n    return ref.id;\n}\n\nexport const generateUserDocument = async (user: IUser, id: string) => {\n    if (!id) return;\n    const userRef = firestore.doc(`users/${id}`);\n    const snapshot = await userRef.get();\n    if (!snapshot.exists) {\n        const {email, name} = user;\n        try {\n            await userRef.set({\n                id,\n                email,\n                name,\n            });\n        } catch (error) {\n            console.error(\"Error creating user document\", error);\n        }\n    }\n};\n\nexport const getDocuments = async (path: FirebaseEnum) => {\n    try {\n        return await firestore.collection(path).get();\n    } catch (error) {\n        console.error(\"Error fetching data\", error);\n    }\n};\n\nexport const getUserDocument = async (id: string) => {\n    try {\n        const userDocument = await firestore.doc(`users/${id}`).get();\n        const response = userDocument.data();\n        return response as IUser;\n    } catch (error) {\n        console.error(\"Error fetching user\", error);\n    }\n};\n\nexport const generateQuestionDocument = async (questionData: any) => {\n    if (!questionData) return;\n    const id = await checkIfIdExists('questions');\n    const userRef = firestore.doc(`questions/${id}`);\n    const {question, correctAnswer, answers} = questionData;\n    try {\n        await userRef.set({\n            id,\n            question,\n            answers,\n            correctAnswer,\n        });\n    } catch (error) {\n        console.error(\"Error creating question document\", error);\n    }\n};\n","import React from 'react';\nimport styled from \"styled-components\";\n\ninterface IProps {\n    value?: string,\n    size?: string,\n    backgroundColor?: string,\n    disabled?: boolean,\n    onClick?: (e: React.SyntheticEvent) => void,\n}\n\nconst ButtonEl = styled.button<IProps>`\n  border: .2rem solid black;\n  border-radius: 2rem;\n  padding: .7rem 1rem;\n  margin: .8rem;\n  color: white;\n  font-size: ${(props: IProps) => props.size ? props.size : 'inherit'};\n  background-color: ${(props) => props.backgroundColor ? props.backgroundColor : 'green'};\n  letter-spacing: 1.2px;\n  font-weight: bold;\n  \n  \n  :disabled{\n    background-color: grey;\n    \n  }\n`\n\nexport const Button = (props: IProps) => {\n    return (\n        <ButtonEl\n            size={props.size}\n            disabled={props.disabled}\n            onClick={props.onClick}\n        >\n            {props.value}\n        </ButtonEl>\n    )\n}","import React from 'react';\nimport styled from \"styled-components\";\n\ninterface IProps {\n    onSubmitHandler?: (e: React.SyntheticEvent) => void,\n    onChange?: (e: React.ChangeEvent<any>) => void,\n    children: React.ReactNode\n}\n\nconst FormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 75vw;\n  max-width: 35rem;\n  margin: 12vh auto;\n  padding: 2rem;\n  border: .3rem solid black;\n  border-radius: 2rem;\n  background-color: rgba(64, 64, 64, .8);\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\n`\n\nexport const Form = (props: IProps) => {\n    return (\n        <FormEl onSubmit={props.onSubmitHandler} onChange={props.onChange}>\n            {props.children}\n        </FormEl>\n    )\n}","import React from 'react';\nimport styled from \"styled-components\";\n\ninterface IProps {\n    type: string,\n    id?: string,\n    name?: string,\n    value?: string,\n    placeholder?: string,\n    backgroundColor?: string,\n    autoComplete?: string,\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    onBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    register?: any\n}\n\nconst InputEl = styled.input<IProps>`\n  width: 90%;\n  max-width: 25rem;\n  margin: .8rem;\n  padding: 0.7rem;\n  border: .15rem solid black;\n  border-radius: 3rem;\n  font-size: inherit;\n  font-weight: 700;\n  letter-spacing: 1px;\n  cursor: pointer;\n  outline: none;\n  background-color: ${(props: IProps) => props.backgroundColor ? props.backgroundColor : 'white'};\n  transition: all 0.4s;\n\n  ::placeholder {\n    color: rgba(0, 0, 0, .6);\n  }\n\n  :hover, :focus {\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;\n    transform: scale(1.02);\n  }\n\n  :focus {\n    transform: scale(1.05);\n    background-color: aqua;\n    border: .2rem solid orange;\n  }\n`\n\nexport const Input = (props: IProps) => {\n    return (\n        <>\n            <InputEl\n                autoComplete={props.autoComplete}\n                type={props.type}\n                id={props.id}\n                name={props.name}\n                value={props.value}\n                onBlur={props.onChange}\n                placeholder={props.placeholder}\n                backgroundColor={props.backgroundColor}\n                {...props.register}\n                onChange={props.onChange}\n\n            />\n        </>\n    )\n}","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\nimport type {RootState, AppDispatch} from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport {Redirect} from 'react-router';\nimport {useAppSelector} from '../../redux/hooks';\n\nexport const RedirectIfUserIsAuth = (path: string) => {\n    const {user} = useAppSelector(state => state);\n\n    if (user.isAuth === true) {\n        return <Redirect to={path}/>\n    }\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\nimport {IApp} from \"../models/app\";\nimport {AppStatus} from '../models/Enums';\n\nconst initialState = {status: AppStatus.Idle, isMenuOpen: false} as IApp;\n\nexport const appSlice = createSlice({\n    name: 'app,',\n    initialState,\n    reducers: {\n        changeStatus(state, action: PayloadAction<AppStatus>) {\n            state.status = action.payload;\n        },\n        setMessage(state, action: PayloadAction<string>) {\n            state.message = action.payload;\n        },\n        toggleMenu(state) {\n            state.isMenuOpen = !state.isMenuOpen;\n        }\n    }\n})\n\nexport const {changeStatus, setMessage, toggleMenu} = appSlice.actions;\n\nexport default appSlice.reducer;","import React from 'react';\nimport styled from 'styled-components';\n\ninterface IProps {\n    size?: string,\n}\n\nconst Span = styled.div<IProps>`\n  display: inline-block;\n\n  :after {\n    content: \" \";\n    display: block;\n    width: ${(props: IProps) => props.size ? props.size + 'rem' : '3rem'};\n    height: ${(props: IProps) => props.size ? props.size + 'rem' : '3rem'};\n    margin: .5rem;\n    border-radius: 50%;\n    border: .5rem solid orange;\n    border-color: orange transparent orange transparent;\n    animation: lds-dual-ring .7s linear infinite;\n  }\n\n  @keyframes lds-dual-ring {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport const Spinner = (props: IProps): JSX.Element => {\n    return (\n        <Span size={props.size}></Span>\n    );\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\ninterface IProps {\n    to: string,\n    value: string\n}\n\nconst StyledLink = styled(Link)`\n  margin-top: 1rem;\n  padding: 0.3rem;\n  font-size: 1.3rem;\n  color: white;\n  text-decoration: none;\n  transition: all .4s;\n  \n  :hover{\n    transform: scaleX(1.1);\n    color: #888;\n  }\n`\n\nexport const LinkEl = (props: IProps) => {\n    return (\n        <StyledLink to={props.to}>{props.value}</StyledLink>\n    )\n}","import styled from \"styled-components\";\n\n const P = styled.p`\n    margin: 0 .2rem .2rem;\n    text-align: center;\n    line-height: 120%;\n`\n\nexport const Error = (props: { value: string | null}) => {\n    return (\n        <P>{props.value}</P>\n    )\n}","import React, {useState} from 'react';\nimport {auth, generateUserDocument} from '../firebase';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\nimport {useForm} from 'react-hook-form';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport {INewUser} from '../../models/User';\nimport {Button} from '../UI/Button';\nimport {Form} from '../UI/Form';\nimport {Input} from '../UI/Input';\nimport {RedirectIfUserIsAuth} from './Helpers';\nimport {useAppDispatch, useAppSelector} from '../../redux/hooks';\nimport {changeStatus} from '../../redux/appSlice';\nimport {Spinner} from '../UI/Spinner';\nimport {AppStatus} from '../../models/Enums';\nimport {LinkEl as Link} from '../UI/Link'\nimport {Error} from '../UI/ErrorMesage';\n\nconst H1 = styled.h1`\n  margin-bottom: 1rem;\n  font-size: 2.4rem;\n`;\n\nconst schema = yup.object().shape({\n    email: yup.string().email().required('Email is Required'),\n    password: yup.string().min(5, 'Password should be at least 3 characters').max(15),\n    confirmPassword: yup.string().oneOf([yup.ref('password'), null]),\n    name: yup.string().min(3,'Name should be at least 3 characters').max(12, 'Too long').required('Name is Required'),\n})\n\nexport const Register = (): JSX.Element => {\n    const dispatch = useAppDispatch();\n    const {app} = useAppSelector(state => state);\n    const history = useHistory();\n    const {register, handleSubmit, formState: {errors, isDirty, isValid}} = useForm({\n        resolver: yupResolver(schema),\n        mode: \"onBlur\"\n    });\n    const [user, setUser] = useState<INewUser>({\n        id: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        name: ''\n    });\n    const [errorMessage, setErrorMessage] = useState<string>('');\n\n    const updateField = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setUser({\n            ...user,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const createUserWithEmailAndPasswordHandler =\n        async () => {\n            dispatch(changeStatus(AppStatus.Loading))\n            try {\n                const createUser = await auth.createUserWithEmailAndPassword(user.email, user.password);\n                if (createUser.user) {\n                    const id = createUser.user.uid;\n                    setUser({\n                        ...user,\n                        id: id,\n                    })\n                    await generateUserDocument(user, id);\n                    history.push('/login');\n                }\n            } catch (error) {\n                dispatch(changeStatus(AppStatus.Idle))\n                setErrorMessage(error.message);\n            }\n            dispatch(changeStatus(AppStatus.Idle))\n            setUser({\n                id: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                name: ''\n            })\n        };\n\n    return (\n        <>\n            {RedirectIfUserIsAuth('/user')}\n            <Form onSubmitHandler={handleSubmit(createUserWithEmailAndPasswordHandler)}>\n                <H1>Register</H1>\n                <Error value={errorMessage && errorMessage}/>\n                <Input\n                    type='email'\n                    name='email'\n                    value={user.email}\n                    autoComplete=\"new-password\"\n                    placeholder='Email...'\n                    register={{...register('email', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.email && <Error value={errors.email.message} />}\n                <Input\n                    type='password'\n                    name='password'\n                    value={user.password}\n                    placeholder='Password...'\n                    register={{...register('password', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.password && <Error value={errors.password.message} />}\n                <Input\n                    type='password'\n                    name='confirmPassword'\n                    value={user.confirmPassword}\n                    placeholder='Confirm Password...'\n                    register={{...register('confirmPassword', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.confirmPassword &&  <Error value={errors.confirmPassword.message}/>}\n                <Input\n                    type='text'\n                    name='name'\n                    value={user.name}\n                    autoComplete=\"new-password\"\n                    placeholder='Name...'\n                    register={{...register('name', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.name && <Error value={errors.name.message}/>}\n                {app.status === AppStatus.Loading ?\n                    <Spinner/>\n                    :\n                    <Button\n                        value='Submit'\n                        size='1.3rem'\n                        disabled={!isValid || !isDirty}\n                    />\n                }\n                <Link to='/login' value='Already have an account?'></Link>\n            </Form>\n        </>\n    )\n}\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nimport {IUser} from \"../../models/User\";\n\nconst initialState = {id: '', name: '', email: ''} as IUser;\n\nexport const UserSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        login(state: IUser, action: PayloadAction<IUser>) {\n            return action.payload;\n        },\n        logout(state: IUser) {\n            return initialState;\n        },\n        isAuth(state, action: PayloadAction<boolean>) {\n            state.isAuth = action.payload;\n        }\n    },\n});\n\nexport const {login, logout, isAuth} = UserSlice.actions;\n\nexport default UserSlice.reducer;","import React, {useEffect, useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport {IUser} from '../../models/User';\nimport {auth, getUserDocument} from '../firebase';\nimport {Button} from '../UI/Button';\nimport {Input} from '../UI/Input';\nimport {Form} from '../UI/Form';\nimport {useAppDispatch, useAppSelector} from '../../redux/hooks';\nimport {login} from '../../redux/user/userSlice';\nimport {RedirectIfUserIsAuth} from './Helpers';\nimport {Spinner} from '../UI/Spinner';\nimport {changeStatus} from '../../redux/appSlice';\nimport {AppStatus} from '../../models/Enums';\nimport {LinkEl as Link} from '../UI/Link'\nimport {Error} from '../UI/ErrorMesage';\n\n\nconst schema = yup.object().shape({\n    email: yup.string().email().required('Email is required'),\n    password: yup.string().required('Password is required'),\n});\n\nexport const UserLogin = (): JSX.Element => {\n    const dispatch = useAppDispatch();\n    const {app} = useAppSelector(state => state);\n    const {register, handleSubmit, formState: {errors}} = useForm({\n        resolver: yupResolver(schema),\n        mode: \"onBlur\",\n    });\n    const [formData, setFormData] = useState({email: '', password: ''});\n    const [error, setError] = useState('');\n    const [fetchedUser, setFetchedUser] = useState({\n        id: '',\n        name: '',\n        email: '',\n        isAuth: false,\n    });\n\n    useEffect(() => {\n        dispatch(login(fetchedUser as IUser));\n    }, [fetchedUser, dispatch])\n\n    const updateField = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const signInWithEmailAndPasswordHandler = async (e: React.SyntheticEvent) => {\n        try {\n            dispatch(changeStatus(AppStatus.Loading))\n            const userLogin = await auth.signInWithEmailAndPassword(formData.email, formData.password);\n            if (userLogin.user) {\n                const userId = userLogin.user.uid;\n                const response = await getUserDocument(userId);\n                if (response) {\n                    setFetchedUser({\n                        id: response.id,\n                        email: response.email,\n                        name: response.name,\n                        isAuth: true,\n                    })\n                }\n            }\n            dispatch(changeStatus(AppStatus.Idle))\n        } catch\n            (error) {\n            setError(error.message);\n            dispatch(changeStatus(AppStatus.Idle))\n        }\n        setFormData({\n            email: '',\n            password: ''\n        })\n    };\n    return (\n        <>\n            {RedirectIfUserIsAuth('/user')}\n            <Form onSubmitHandler={handleSubmit(signInWithEmailAndPasswordHandler)}>\n                <h1>Login</h1>\n                <Error value={error && error}/>\n                <Input\n                    type='email'\n                    name='email'\n                    value={formData.email}\n                    autoComplete=\"new-password\"\n                    placeholder='Email'\n                    register={{...register('email', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.email && <Error value={errors.email.message}/>}\n                <Input\n                    type='password'\n                    name='password'\n                    value={formData.password}\n                    placeholder='Password'\n                    register={{...register('password', {required: true})}}\n                    onChange={updateField}\n                />\n                {errors.password && <Error value={errors.password.message}/>}\n                {app.status === AppStatus.Loading ?\n                    <Spinner/>\n                    :\n                    <Button\n                        value='Submit'\n                        size='1.3rem'\n                    />\n                }\n                <Link to='/register' value='Create an account'></Link>\n            </Form>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/avatarAvocado.b9e21133.svg\";","const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    tablet: '720px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '1920px',\n};\n\nexport const device: typeof size = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n};","import React from 'react';\nimport styled from 'styled-components';\n\nimport {useAppDispatch, useAppSelector} from '../../redux/hooks';\nimport {Button} from '../UI/Button';\nimport {logout} from '../../redux/user/userSlice';\nimport {useHistory} from 'react-router';\nimport {auth} from '../firebase';\nimport avatarAvocado from '.././../images/avatarAvocado.svg'\nimport {device} from '../../models/MediaQueries';\n\nconst Profile = styled.div`\n  height: 100vh;\n  display: grid;\n  margin: 0 1.5rem;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 3fr 1fr;\n  justify-content: center;\n\n  button {\n    grid-row: 3;\n    align-self: flex-end;\n    margin-top: auto;\n    margin-bottom: 2rem;\n  }\n\n@media${device.tablet} {\n  button {\n    justify-self: center;\n    max-width: 30rem;\n  }\n}\n`\n\nconst About = styled.div`\n  width: 55vw;\n  min-width: 25rem;\n  margin: 10vh 1rem;\n  padding: 1rem;\n  justify-self: center;\n  border: .3rem solid orange;\n  background-color: rgba(0, 0, 0, .65);\n  font-size: 1.5rem;\n\n  p {\n    margin: .5rem;\n  }\n\n  img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 11rem;\n    height: 11rem;\n    background-color: orange;\n    border-radius: 10rem;\n  }\n\n@media${device.tablet} {\n  max-width: 35rem;\n`\n\nconst SingIn = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n\n@media${device.tablet} {\n  font-size: 2rem;\n}\n`\nexport const UserProfile = () => {\n    const {user} = useAppSelector(state => state);\n    const dispatch = useAppDispatch();\n    const history = useHistory();\n\n    const logoutHandler = async () => {\n        await auth.signOut();\n        dispatch(logout());\n        history.push('/login')\n    }\n    return (\n        <>\n            {user.id ?\n                <Profile>\n                    <About>\n                        <img src={avatarAvocado} alt=\"Avocado Avatar\"/>\n                        <p>Name: {user.name}</p>\n                        <p>Mail: {user.email} </p>\n                    </About>\n                    <Button\n                        onClick={logoutHandler}\n                        value='Sign out'\n                        size='1.5rem'/>\n                </Profile>\n                :\n                <SingIn>\n                    <h1>You're Not Logged In</h1>\n                    <Button\n                        onClick={() => history.push('/login')}\n                        value='Sign In'\n                        size='1.5rem'/>\n                </SingIn>\n            }\n        </>\n    )\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nimport {IGame} from \"../../models/Game\";\n\nconst initialState = {} as IGame;\n\nexport const GameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        startGame: {\n            reducer: (state, action: PayloadAction<IGame>) => {\n                return action.payload\n            },\n            prepare: ({questionRandomIds, questions}) => ({\n                payload: {\n                    questionRandomIds,\n                    questions,\n                    currentQuestion: 0,\n                    score: 0,\n                } as IGame\n            })\n        },\n        updateCurrentQuestion(state): void {\n            state.currentQuestion = state.currentQuestion! + 1;\n            state.chosenAnswer = null;\n        },\n        updateScore(state): void {\n            state.score = state.score + 1\n        },\n        setChosenAnswer(state, action: PayloadAction<number>): void {\n            state.chosenAnswer = action.payload;\n        }\n    }\n});\n\nexport const {startGame, updateCurrentQuestion, updateScore, setChosenAnswer} = GameSlice.actions;\n\nexport default GameSlice.reducer;\n\n\n    ","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Iprops {\n    currentQuestion: number,\n}\n\nconst Bar = styled.div`\n  width: 100%;\n  background: white;\n  height: 1rem;\n  border-radius: 20rem;\n  margin: 0 0 1.5rem;\n\n`\nconst Progress = styled.div <Iprops>`\n  width: ${(props: Iprops) => props.currentQuestion && props.currentQuestion + '%'};\n  background: #84BF04;\n  height: 100%;\n  border-radius: 20rem;\n\n\n`\n\nexport const ProgressBar = (props: Iprops) => {\n    const progress = props.currentQuestion / 5 * 100;\n\n    return (\n        <>\n            <Bar>\n                <Progress currentQuestion={progress} />\n            </Bar>\n        </>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {setChosenAnswer, startGame, updateCurrentQuestion, updateScore} from '../../redux/game/gameSlice';\nimport {useAppDispatch, useAppSelector} from '../../redux/hooks';\nimport {Button} from '../UI/Button';\nimport {Form} from '../UI/Form';\nimport {Answer, Question} from '../../models/Game';\nimport {useFetchQuestions} from '../Question/useFetchQuestions';\nimport {AppStatus} from '../../models/Enums';\nimport {Spinner} from '../UI/Spinner';\nimport {ProgressBar} from './ProgressBar';\nimport {useHistory} from 'react-router-dom';\n\ninterface IProps {\n    isChosen: boolean;\n    correctAnswer: boolean;\n}\n\nconst Div = styled.data`\n  font-size: 1.2rem;\n  text-align: center;\n\n  h2 {\n    padding: 2 .rem;\n    margin: .5rem .2rem;\n  }\n`\n\nconst P = styled.p<IProps>`\n  width: 100%;\n  padding: .8rem .3rem;\n  border-radius: 2rem;\n  text-align: center;\n  margin: 2rem 0;\n  cursor: pointer;\n  background-color: ${(props) => props.isChosen && '#038C33'};\n  background-color: ${(props) => props.correctAnswer && '#05F240'};\n  border: ${(props) => props.correctAnswer ? '3px solid #37A63E' : '2px solid orange'};\n  font-weight: bold;\n  color: white;\n`\n\nconst Result = styled.div`\n  margin: 1rem 1rem 0;\n  text-align: center;\n\n  h1 {\n    margin: .7rem;\n  }\n\n  h2 {\n    margin: 1rem;\n  }\n`\n\nexport const Game = () => {\n    const dispatch = useAppDispatch();\n    const {game, app} = useAppSelector(state => state);\n    const questionRandomIds: Array<number> = [];\n    const [correctAnswer, setCorrectAnswer] = useState<number | null>(null);\n    const questions: Array<Question> = useFetchQuestions();\n    const history = useHistory()\n\n    useEffect(() => {\n        dispatch(startGame({questionRandomIds, questions}))\n    }, [questions]);\n\n    const answeredQuestionHandler = (id: number): void => {\n        dispatch(setChosenAnswer(id))\n    };\n\n    const questionHandler = () => {\n        if (game.currentQuestion <= 4) {\n            if (game.questions) {\n                const currentQuestion: number = game.currentQuestion;\n                const selectedAnswerId: Answer[] = game.questions[currentQuestion].answers;\n\n                return (\n                    <>\n                        <ProgressBar currentQuestion={currentQuestion}/>\n                        <Div>\n                            <h2>{game.questions[currentQuestion].question}</h2>\n                            {selectedAnswerId.map(el => {\n                                return <P\n                                    key={el.id}\n                                    isChosen={el.id === game.chosenAnswer}\n                                    correctAnswer={el.id === correctAnswer}\n                                    onClick={() => answeredQuestionHandler(selectedAnswerId[el.id].id)}>\n                                    {game.questions[currentQuestion].answers[el.id].answer}\n                                </P>\n                            })}\n                        </Div>\n                        <Button onClick={submitAnswerHandler} value='Submit' size='1.5rem'/>\n                    </>\n                )\n            }\n        } else {\n            return (\n                <Result>\n                    <h1>{game.score}/{game.currentQuestion}</h1>\n                    {game.score > 2 ?\n                        (<h2>Awesome!</h2>) :\n                        (<h2>Dont Give Up!</h2>)\n                    }\n                    <Button value='Next Game' size='1.5rem' onClick={() =>history.push('/game')}/>\n                </Result>\n            )\n        }\n    };\n\n    const submitAnswerHandler = (e: React.SyntheticEvent): void => {\n        e.preventDefault();\n        const currentQuestion: number = game.currentQuestion;\n        if (game.chosenAnswer === game.questions[currentQuestion].correctAnswer) {\n            dispatch(updateScore());\n        }\n        setCorrectAnswer(game.questions[currentQuestion].correctAnswer);\n\n        const nextQuestion = () => {\n            dispatch(updateCurrentQuestion());\n            setCorrectAnswer(null);\n        }\n        setTimeout(nextQuestion, 800);\n    }\n    return (\n        <>\n            <Form>\n                {app.status === AppStatus.Idle ?\n                    (questionHandler())\n                    :\n                    <Spinner size='10'/>\n                }\n\n            </Form>\n\n        </>\n    )\n}\n","import {useEffect, useState} from 'react';\n\nimport {AppStatus, Firebase} from '../../models/Enums';\nimport {Question} from '../../models/Game';\nimport {changeStatus} from '../../redux/appSlice';\nimport {useAppDispatch} from '../../redux/hooks';\nimport {getDocuments} from '../firebase';\n\nexport const useFetchQuestions = () => {\n    const [questions, setQuestions] = useState<Array<Question>>([]);\n    const dispatch = useAppDispatch();\n\n    const data = async () => {\n        const fetchedQuestion: Array<Question> = [];\n\n        const dataArr = await getDocuments(Firebase.Questions);\n        if (dataArr) {\n            dataArr.forEach(doc => {\n                const {id, answers, correctAnswer, question} = doc.data();\n                let AnswersArr: any = [];\n                AnswersArr.push({id: 0, answer: answers[0]}, {id: 1, answer: answers[1]}, {id: 2, answer: answers[2]});\n\n                fetchedQuestion.push({\n                    id,\n                    answers: AnswersArr,\n                    correctAnswer: parseFloat(correctAnswer),\n                    question,\n                });\n            })\n            setQuestions(fetchedQuestion);\n            dispatch(changeStatus(AppStatus.Idle))\n        }\n    }\n\n    useEffect(() => {\n        dispatch(changeStatus(AppStatus.Loading))\n        data();\n    }, []);\n\n    return questions;\n}","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport {useForm} from 'react-hook-form';\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport {AppStatus} from '../../models/Enums';\nimport {changeStatus} from '../../redux/appSlice';\nimport {useAppDispatch, useAppSelector} from '../../redux/hooks';\nimport {generateQuestionDocument} from '../firebase';\nimport {Button} from '../UI/Button';\nimport {Form} from '../UI/Form';\nimport {Input} from '../UI/Input';\nimport {Spinner} from '../UI/Spinner';\nimport {Error} from '../UI/ErrorMesage';\n\nconst Answers = styled.div`\n  text-align: center;\n  width: 100%;\n`\n\nconst CorrectAnswers = styled(Answers)`\n  width: 75%;\n  padding: .7rem .5rem;\n  background-color: rgba(0, 0, 0, .65);\n  border-radius: 2rem;\n  margin: 1.5rem 0 1rem;\n\n  h2 {\n    color: green;\n  }\n\n  label {\n    display: flex;\n    justify-content: center;\n    margin: .7rem .5rem;\n  }\n\n  p {\n    margin: 0 .5rem;\n    font-weight: 600;\n  }\n`\nconst schema = yup.object().shape({\n    question: yup.string().min(5, 'Question should be at least 5 characters').max(100, 'Too long').required('Question is required'),\n    correctAnswer: yup.number().nullable().required('Correct Answer is required'),\n    0: yup.string().min(2, 'Minimum of 2 characters').max(35, 'Maximum of 35 characters').required('Answer is required'),\n    1: yup.string().min(2, 'Minimum of 2 characters').max(35, 'Maximum of 35 characters').required('Answer is required'),\n    2: yup.string().min(2, `Minimum of 2 characters`).max(35, 'Maximum of 35 characters').required('Answer is required'),\n});\n\nexport const AddQuestion = () => {\n    const dispatch = useAppDispatch();\n    const {app} = useAppSelector(state => state);\n    const {register, handleSubmit, formState: {errors, isDirty, isValid}} = useForm({\n        resolver: yupResolver(schema),\n        mode: \"onBlur\",\n    });\n    const choices = [{id: 0, value: 'Answer 1'}, {id: 1, value: 'Answer 2'}, {id: 2, value: 'Answer 3'}];\n    const [question, setQuestion] = useState<{ question: string, correctAnswer: number, answers: Array<object> }>();\n    const [answers, setAnswers] = useState<any[]>([]);\n    const [errorMessage, setErrorMessage] = useState<string>();\n\n    const setQuestionHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setQuestion({\n            ...question!,\n            [e.currentTarget.name]: e.currentTarget.value,\n        });\n    };\n\n    const addAnswersHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setAnswers({\n            ...answers,\n            [parseFloat(e.currentTarget.id)]: e.currentTarget.value\n        });\n        setQuestion({\n            ...question!,\n            answers: answers\n        });\n    }\n\n    const onSubmitHandler = async (e: React.SyntheticEvent) => {\n        dispatch(changeStatus(AppStatus.Loading))\n        try {\n            await generateQuestionDocument(question);\n        } catch (error) {\n            dispatch(changeStatus(AppStatus.Idle))\n            setErrorMessage(error.message);\n        }\n        dispatch(changeStatus(AppStatus.Idle))\n    }\n\n    return (\n        <>\n            <Form onSubmitHandler={handleSubmit(onSubmitHandler)}>\n                <h1>Add Question</h1>\n                <Input\n                    type='text'\n                    name=\"question\"\n                    autoComplete='off'\n                    register={{...register('question', {required: true})}}\n                    onChange={setQuestionHandler}\n                />\n                {errors.question && <Error value={errors.question.message}/>}\n                <Answers>\n                    <h2>Answers</h2>\n                    <Input\n                        type='text'\n                        id='0'\n                        key={0} name=\"0\"\n                        placeholder='1'\n                        autoComplete='off'\n                        register={{...register('0', {required: true})}}\n                        onChange={addAnswersHandler}\n                    />\n                    {errors[0] && <Error value={errors[0].message}/>}\n                    <Input\n                        type='text'\n                        id='1' key={1}\n                        name=\"1\"\n                        placeholder='2'\n                        autoComplete='off'\n                        register={{...register('1', {required: true})}}\n                        onChange={addAnswersHandler}\n                    />\n                    {errors[1] && <Error value={errors[1].message}/>}\n                    <Input\n                        type='text'\n                        id='2' key={2}\n                        name=\"2\"\n                        placeholder='3'\n                        autoComplete='off'\n                        register={{...register('2', {required: true})}}\n                        onChange={addAnswersHandler}\n                    />\n                    {errors[2] && <Error value={errors[2].message}/>}\n                </Answers>\n                <CorrectAnswers>\n                    <h2>Correct Answer </h2>\n                    {choices.map(el => {\n                        return (\n                            <label key={el.id} htmlFor={el.value}>\n                                <input\n                                    type=\"radio\"\n                                    value={el.id}\n                                    key={el.id}\n                                    id={el.value}\n                                    {...register('correctAnswer', {required: true})}\n                                    onChange={setQuestionHandler}\n                                />\n                                <p>{el.value}</p>\n                            </label>\n                        )\n                    })}\n                    {errors.correctAnswer && <Error value={errors.correctAnswer.message}/>}\n\n                </CorrectAnswers>\n                {app.status === AppStatus.Loading ?\n                    <Spinner/>\n                    :\n                    <Button\n                        value='Submit'\n                        size='1.5rem'\n                        disabled={!isValid || !isDirty}\n                    />\n                }\n            </Form>\n        </>\n    )\n}","import React from 'react';\nimport styled from \"styled-components\";\n\nimport {device} from '../../models/MediaQueries';\n\nexport const Div = styled.div<IProps>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: ${(props: IProps) => props.margin ? props.margin : '10vh 0 0'};\n\n@media${device.laptop} {\n  flex-direction: row;\n}\n`\n\ninterface IProps {\n    margin?: string\n    children: JSX.Element | JSX.Element[]\n}\n\nexport const Wrapper = (props: IProps) => {\n    return (\n        <Div margin={props.margin}>\n            {props.children}\n        </Div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Firebase} from '../../models/Enums';\nimport {getDocuments} from '../firebase';\nimport {Question as questionModel} from '../../models/Game';\nimport {Spinner} from '../UI/Spinner';\nimport {Wrapper} from '../UI/Wrapper';\n\nconst QuestionsEl = styled.div`\n  width: 75vw;\n  max-width: 40rem;\n  margin-bottom: 5vh;\n`\n\nconst Question = styled.div`\n  margin: 1.5rem .5rem;\n  padding: 1rem .8rem;\n  background-color: rgba(0, 0, 0, .65);\n  text-align: center;\n  border-bottom: 2px solid orange;\n\n  h2 {\n    margin: 1rem .1rem;\n    color: green;\n  }\n`\n\nconst SpinnerEl = styled.div`\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const Questions = () => {\n    const [questions, setQuestions] = useState<Array<questionModel>>([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        fetchQuestions();\n    }, []);\n\n    const fetchQuestions = async () => {\n        setLoading(true);\n        const data = await getDocuments(Firebase.Questions);\n        const fetchedQuestion: Array<questionModel> = []\n\n        if (data) {\n            data.forEach(doc => {\n                const {id, answers, correctAnswer, question} = doc.data();\n                let AnswersArr: any = []\n                AnswersArr.push({id: 0, answer: answers[0]}, {id: 1, answer: answers[1]}, {id: 2, answer: answers[2]})\n\n                fetchedQuestion.push({\n                    id,\n                    answers: AnswersArr,\n                    correctAnswer,\n                    question,\n                })\n            })\n            setQuestions(fetchedQuestion)\n        }\n        setLoading(false)\n    }\n\n    const showFetchedQuestion = () => {\n        return (\n            <Wrapper>\n                {loading ?\n                    (<SpinnerEl><Spinner size='10'/> </SpinnerEl>)\n                    :\n                    (\n                        <QuestionsEl>\n                            {questions.map(el =>\n                                <Question key={el.id}>\n                                    <h2>Q: {el.question}</h2>\n                                    <h3>{el.answers[el.correctAnswer].answer}</h3>\n                                </Question>\n                            )}\n                        </QuestionsEl>\n                    )\n                }\n            </Wrapper>\n        )\n    }\n\n    return (\n        <>\n            {showFetchedQuestion()}\n        </>\n    )\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {useHistory} from 'react-router';\n\nimport {Wrapper} from '../UI/Wrapper';\nimport {device} from '../../models/MediaQueries';\n\nconst Element = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2rem 0;\n  width: 50vw;\n  height: 50vw;\n  max-width: 25rem;\n  max-height: 25rem;\n  background-color: rgba(0, 0, 0, 0.65);\n  transition: all .2s;\n\n  h1 {\n    margin-bottom: .7rem;\n    text-align: center;\n    font-size: 2.4rem;\n  }\n  \n  :hover{\n    transform: scale(1.05);\n  }\n\n  :active, :focus {\n    transform: scale(.98);\n    border: .4rem solid orange;\n  }\n\n@media${device.laptop} {\n  margin: 15vh 5vw;\n}\n`\n\nexport const Home = () => {\n    const history = useHistory();\n\n    return (\n        <Wrapper>\n            <Element onClick={() => history.push('/game')}>\n                <h1>Play</h1>\n            </Element>\n\n            <Element onClick={() => history.push('/login')}>\n                <h1>Sign In</h1>\n            </Element>\n        </Wrapper>\n    )\n}","export default __webpack_public_path__ + \"static/media/question-mark-background.715c47a3.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport {device} from '../../../models/MediaQueries';\n\nexport const Burger = styled.button<MenuIProps>`\n  position: fixed;\n  top: 5%;\n  left: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 2rem;\n  height: 2rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  z-index: 101;\n\n  &:focus {\n    outline: none;\n  }\n\n  div {\n    width: 2rem;\n    height: .2rem;\n    border-radius: 10px;\n    transition: all 0.3s linear;\n    position: relative;\n    transform-origin: 1px;\n    background-color: ${(props: MenuIProps) => props.isOpen ? 'black' : 'white'};\n\n    :first-child {\n      transform: ${(props: MenuIProps) => props.isOpen ? 'rotate(45deg) ' : 'rotate(0)'};\n    }\n\n    :nth-child(2) {\n      opacity: ${(props: MenuIProps) => props.isOpen ? '0' : '1'};\n      transform: ${(props: MenuIProps) => props.isOpen ? 'translateX(-20px) ' : 'translateX(0)'};\n    }\n\n    :nth-child(3) {\n      transform: ${(props: MenuIProps) => props.isOpen ? 'rotate(-45deg) ' : 'rotate(0)'};\n    }\n  }\n\n@media${device.mobileM} {\n  width: 2.5rem;\n  height: 2.5rem;\n\n  div {\n    width: 2.5rem;\n    height: .25rem;\n  }\n} @media${device.tablet} {\n  width: 3rem;\n  height: 3rem;\n  left: 2rem;\n\n  div {\n    width: 3rem;\n    height: .3rem;\n  }\n} @media${device.laptopL} {\n  width: 4rem;\n  height: 4rem;\n  left: 3rem;\n\n  div {\n    width: 4rem;\n    height: .4rem;\n  }\n}\n`;\n\nexport interface MenuIProps {\n    isOpen: boolean,\n    setIsOpen?: () => void,\n}\n\nexport const BurgerEl = (props: MenuIProps) => {\n    return (\n        <Burger isOpen={props.isOpen} onClick={props.setIsOpen}>\n            <div></div>\n            <div></div>\n            <div></div>\n        </Burger>\n    )\n}","import styled from 'styled-components';\nimport {device} from '../../../models/MediaQueries';\nimport {MenuIProps} from './Burger';\nimport {Link } from 'react-router-dom'\n\nexport const Nav = styled.nav<MenuIProps>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background: orange;\n  height: 100%;\n  width: 100%;\n  text-align: left;\n  z-index: 100;\n  padding: 2rem;\n  position: fixed;\n  top: 0;\n  left: 0;\n  transition: transform 0.3s ease-in-out;\n  transform: ${(props: MenuIProps) => props.isOpen ? 'translateX(0)' : 'translateX(-100%)'};\n  font-size: 2rem;\n\n@media${device.tablet} {\n  font-size: 2.5rem;\n}\n`;\n\nconst StyledLink = styled(Link)`\n  padding: 2rem 0;\n  margin: 0 auto;\n  text-align: center;\n  color: black;\n  font-weight: bold;\n  letter-spacing: 0.5rem;\n  text-decoration: none;\n  text-transform: uppercase;\n  transition: color 0.2s linear;\n\n  &:hover {\n    color: white;\n  }`\n\nexport const Navigation = (props: MenuIProps) => {\n\n    return (\n        <Nav isOpen={props.isOpen}>\n            <StyledLink to='/game' onClick={props.setIsOpen}>Game</StyledLink>\n            <StyledLink to='/user' onClick={props.setIsOpen}>Profile</StyledLink>\n            <StyledLink to='/questions' onClick={props.setIsOpen}>questions</StyledLink>\n            <StyledLink to='/' onClick={props.setIsOpen}>Home</StyledLink>\n        </Nav>\n    )\n}","import React from 'react';\nimport {toggleMenu} from '../../../redux/appSlice';\nimport {useAppDispatch, useAppSelector} from '../../../redux/hooks';\nimport {BurgerEl} from './Burger';\nimport {Navigation} from './Navigation';\n\n\nexport const Menu = () => {\n    const {app} = useAppSelector(state => state);\n    const dispatch = useAppDispatch();\n\n    return (\n        <div>\n            <BurgerEl isOpen={app.isMenuOpen!} setIsOpen={() => dispatch(toggleMenu())}/>\n            <Navigation isOpen={app.isMenuOpen!} setIsOpen={() => dispatch(toggleMenu())}/>\n        </div>\n    )\n};","import {HashRouter as Router, Switch, Route} from \"react-router-dom\";\nimport React, {useEffect, useState} from 'react';\nimport {createGlobalStyle} from 'styled-components'\n\nimport {Register} from './components/User/Register';\nimport {UserLogin} from './components/User/UserLogin';\nimport {UserProfile} from './components/User/UserProfile';\nimport {useAppDispatch, useAppSelector} from './redux/hooks';\nimport {auth, getUserDocument} from \"./components/firebase\";\nimport {login} from \"./redux/user/userSlice\";\nimport {IUser} from \"./models/User\";\nimport {Game} from \"./components/Game/Game\";\nimport {AddQuestion} from \"./components/Question/AddQuestion\";\nimport {Questions} from \"./components/Question/Questions\";\nimport {Home} from \"./components/HomePage/Home\";\nimport background from './images/question-mark-background.jpg'\nimport {device} from './models/MediaQueries';\nimport {Menu} from \"./components/UI/Menu/Menu\";\n\ninterface Iprops {\n    isMenuOpen: boolean,\n}\n\nconst GlobalStyles = createGlobalStyle<Iprops>`\n  *,\n  *::after,\n  *::before {\n    box-sizing: inherit;\n    margin: 0;\n    padding: 0;\n  }\n\n  html {\n    font-size: 62.5%;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n    background: url(${background}) no-repeat center center fixed;\n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n\n  @media${device.mobileM} {\n    font-size: 71.25%;\n  } @media${device.tablet} {\n    font-size: 81.25%;\n  } @media${device.laptopL} {\n    font-size: 100%;\n  }\n  }\n\n  body {\n    font-family: 'Roboto', sans-serif;\n    box-sizing: border-box;\n    letter-spacing: 1.5px;\n    color: white;\n    overflow: ${(props: Iprops) => props.isMenuOpen ? 'hidden' : 'visible'};\n  }\n`\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    const {app} = useAppSelector(state => state);\n    const [fetchedUser, setFetchedUser] = useState({\n        id: '',\n        name: '',\n        email: '',\n        isAuth: false,\n    });\n\n    useEffect(() => {\n        onAuthStateChange();\n    }, []);\n\n    useEffect(() => {\n        dispatch(login(fetchedUser as IUser));\n    }, [fetchedUser, dispatch]);\n\n    const onAuthStateChange = () => {\n        return auth.onAuthStateChanged(async user => {\n            if (user) {\n                const response = await getUserDocument(user.uid);\n                if (response) {\n                    setFetchedUser({\n                        id: response.id,\n                        email: response.email,\n                        name: response.name,\n                        isAuth: true,\n                    });\n                }\n            }\n        });\n    };\n\n    return (\n        <>\n            <GlobalStyles isMenuOpen={app.isMenuOpen!} />\n            <Router>\n                <Menu/>\n                <Switch>\n                    <Route path='/user' component={UserProfile}/>\n                    <Route path=\"/register\" component={Register}/>\n                    <Route path=\"/login\" component={UserLogin}/>\n                    <Route exact path=\"/questions\" component={Questions}/>\n                    <Route exact path=\"/questions/add\" component={AddQuestion}/>\n                    <Route path='/game' component={Game}/>\n                    <Route path='/' component={Home}/>\n                </Switch>\n            </Router>\n        </>\n    )\n}\n\nexport default App;","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\n\nimport appReducer from './appSlice';\nimport userReducer from './user/userSlice';\nimport gameReducer from './game/gameSlice';\n\nexport const store = configureStore({\n    reducer: {\n        app: appReducer,\n        user: userReducer,\n        game: gameReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}